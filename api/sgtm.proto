syntax = "proto3";

package sgtm;

option go_package = "moul.io/sgtm/pkg/sgtmpb";

import "google/api/annotations.proto";
import "patch/go.proto";

service WebAPI {
  //rpc Register(Register.Request) returns (Register.Response) { option (google.api.http) = {post: "/api/v1/Register", body: "*"}; }
  rpc UserList(UserList.Request) returns (UserList.Response) { option (google.api.http) = {get: "/api/v1/UserList"}; }
  rpc PostList(PostList.Request) returns (PostList.Response) { option (google.api.http) = {get: "/api/v1/PostList"}; }
  // rpc PostSync(PostSync.Request) returns (PostSync.Response) { option (google.api.http) = {get: "/api/v1/PostSync"}; }
  rpc Me(Me.Request) returns (Me.Response) { option (google.api.http) = {get: "/api/v1/Me"}; }
  rpc Ping(Ping.Request) returns (Ping.Response) { option (google.api.http) = {get: "/api/v1/Ping"}; }
  rpc Status(Status.Request) returns (Status.Response) { option (google.api.http) = {get: "/api/v1/Status"}; }
}

message Ping {
  message Request {}
  message Response {}
}

message Status {
  message Request {}
  message Response {
    int32 uptime = 1;
    string hostname = 2;
    bool everything_is_ok = 3;
  }
}

message Register {
  message Request {
    string email = 10;
    string slug = 11;
    string firstname = 12;
    string lastname = 13;
  }
  message Response {
    User user = 1;
  }
}

message UserList {
  message Request {}
  message Response {
    repeated User users = 1;
  }
}

message PostList {
  message Request {}
  message Response {
    repeated Post posts = 1;
  }
}

message PostSync {
  message Request {
    int64 id = 1 [(go.field) = {name: 'ID'}];
  }
  message Response {}
}

message Me {
  message Request {}
  message Response {
    User user = 1;
  }
}

/// Models

/*
╔══════════════╗    ╔══════════════╗
║     Post     ║    ║     User     ║
║              ║    ║              ║
║    Author    ║    ║    Email     ║
║    Title     ║    ║     Slug     ║
║     Slug     ║────║     Name     ║
║   ReplyTo    ║    ║              ║
║    ForkOf    ║    ║              ║
║     Kind     ║    ║              ║
╚══════════════╝    ╚══════════════╝
 */

message User {
  /// model base

  int64 id = 1 [(go.field) = {name: 'ID', tags: 'gorm:"primary_key"'}];
  int64 created_at = 2 [(go.field) = {tags: 'gorm:"autocreatetime:nano"'}];
  int64 updated_at = 3 [(go.field) = {tags: 'gorm:"autoupdatetime:nano"'}];
  int64 deleted_at = 4;

  /// fields

  string email = 10 [(go.field) = {tags: 'gorm:"size:255;not null;index:,unique"'}];
  string slug = 11 [(go.field) = {tags: 'gorm:"size:32;not null;default:\'\'"'}];
  string firstname = 12 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string lastname = 13 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string locale = 14 [(go.field) = {tags: 'gorm:"size:32;not null;default:\'\'"'}];
  string avatar = 15 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string discord_id = 16 [(go.field) = {name: "DiscordID", tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string discord_username = 17 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string headline = 18;
  string bio = 19;
  string inspirations = 20;
  string gears = 21;
  string genres = 22;
  string location = 23;
  string twitter_username = 24;
  string homepage = 25;
  string other_links = 26;
  string goals = 27;
  string soundcloud_username = 28;
  string role = 29;
  int64 processing_version = 30;
  string processing_error = 31;
  // timezone
  // location

  /// relationships

  repeated Post recent_posts = 50 [(go.field) = {tags: 'gorm:"foreignkey:AuthorID;PRELOAD:false"'}];
  repeated Relationship relationships_as_source = 51 [(go.field) = {tags: 'gorm:"foreignKey:SourceUserID"'}];
  repeated Relationship relationships_as_target = 52 [(go.field) = {tags: 'gorm:"foreignKey:TargetUserID"'}];
}

message Post {
  /// model base

  int64 id = 1 [(go.field) = {name: 'ID', tags: 'gorm:"primary_key"'}];
  int64 created_at = 2 [(go.field) = {tags: 'gorm:"autocreatetime:nano"'}];
  int64 updated_at = 3 [(go.field) = {tags: 'gorm:"autoupdatetime:nano"'}];
  int64 deleted_at = 4;

  /// generic

  User author = 10;
  int64 author_id = 11 [(go.field) = {name: 'AuthorID'}];
  string title = 12;
  string slug = 13;
  Kind kind = 14;
  Visibility visibility = 15;
  string url = 16 [(go.field) = {name: 'URL'}];
  Provider provider = 17;
  string body = 18;
  int64 sort_date = 19;
  int64 processing_version = 20;
  string processing_error = 21;

  /// comment

  //int64 thread_post_id = 20 [(go.field) = {name: 'ThreadPostID'}];
  //Post thread_post = 21;
  //int64 reply_to_id = 22 [(go.field) = {name: 'ReplyToID'}];
  //Post reply_to = 23;

  /// track

  string genre = 40 [deprecated = true]; // replaced by 'tags'
  uint64 duration = 41;
  string artwork_url = 42 [(go.field) = {name: 'ArtworkURL'}];
  double bpm = 43 [(go.field) = {name: 'BPM'}];
  string key_signature = 44;
  string isrc = 45 [(go.field) = {name: 'ISRC'}];
  string provider_title = 53;
  string provider_description = 46;
  string provider_download_url = 47 [(go.field) = {name: 'DownloadURL'}];
  int64 provider_created_at = 48;
  int64 provider_updated_at = 49;
  string provider_metadata = 50;
  string tags = 51; // comma separated list of tags
  string lyrics = 52;
  string daw_name = 54;
  int64 tracks_number = 55;
  string plugins = 56;

  /// soundcloud post

  string soundcloud_secret_token = 80 [(go.field) = {name: 'SoundCloudSecretToken'}];
  uint64 soundcloud_id = 81 [(go.field) = {name: 'SoundCloudID'}];
  SoundCloudKind soundcloud_kind = 83 [(go.field) = {name: 'SoundCloudKind'}];

  /// ipfs post

  string ipfs_cid = 90 [(go.field) = {name: 'IPFSCID'}];
  string mime_type = 91 [(go.field) = {name: 'MIMEType'}];
  int64 size_bytes = 92;
  string file_extension = 93;
  string attachment_filename = 94;

  /// tracking activities

  int64 target_user_id = 101 [(go.field) = {name: 'TargetUserID'}];
  User target_user = 102;
  int64 target_post_id = 103 [(go.field) = {name: 'TargetPostID'}];
  Post target_post = 104;
  string target_metadata = 105;

  /// relationships

  repeated Relationship relationships_as_source = 110 [(go.field) = {tags: 'gorm:"foreignKey:SourcePostID"'}];
  repeated Relationship relationships_as_target = 111 [(go.field) = {tags: 'gorm:"foreignKey:TargetPostID"'}];

  enum SoundCloudKind {
    UnknownSoundCloudKind = 0;
    SoundCloudTrack = 1;
    //SoundCloudPlaylist = 2;
  }

  enum Kind {
    UnknownKind = 0;
    TrackKind = 1;
    LoginKind = 2;
    RegisterKind = 3;
    LinkDiscordAccountKind = 4;
    ViewProfileKind = 5;
    ViewPostKind = 6;
    ViewOpenKind = 7;
    ViewHomeKind = 8;
    CommentKind = 9;
    //ViewOwnProfileKind
    //ViewOwnTrackKind
    //EditTrackKind
    //EditProfileKind
    //ReactionKind
    //ForkKind
    //FeatKind
  }
}

message Relationship {
  /// model base

  int64 id = 1 [(go.field) = {name: 'ID', tags: 'gorm:"primary_key"'}];
  int64 created_at = 2 [(go.field) = {tags: 'gorm:"autocreatetime:nano"'}];
  int64 updated_at = 3 [(go.field) = {tags: 'gorm:"autoupdatetime:nano"'}];
  int64 deleted_at = 4;

  /// relationship fields

  Kind kind = 10;
  int64 source_post_id = 11 [(go.field) = {name: 'SourcePostID'}];
  Post source_post = 12;
  int64 target_post_id = 13 [(go.field) = {name: 'TargetPostID'}];
  Post target_post = 14;
  int64 source_user_id = 15 [(go.field) = {name: 'SourceUserID'}];
  User source_user = 16;
  int64 target_user_id = 17 [(go.field) = {name: 'TargetUserID'}];
  User target_user = 18;
  string source_raw = 19;
  string target_raw = 20;
  string metadata = 21;

  enum Kind {
    UnknownKind = 0;
    FeaturingUserKind = 1;
    RemixOfTrackKind = 2;
    NewVersionOfTrackKind = 3;
    InspiredByTrackKind = 4;
    RemixOfUserKind = 5;
  }
}

/// Common enums

enum Visibility {
  UnknownVisibility = 0;
  Public = 1;
  Draft = 2;
}
enum Provider {
  UnknownProvider = 0;
  SoundCloud = 1;
  IPFS = 2;
}

/// Internal

message Session {
  int64 user_id = 1 [(go.field) = {name: "UserID"}];
  string discord_access_token = 2;
}
